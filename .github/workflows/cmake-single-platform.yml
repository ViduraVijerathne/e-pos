# # This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# # See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
# name: CMake on a single platform

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.

name: Build Flutter Windows App

on:
  push:
    branches:
      - main  # Adjust based on your default branch

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: "latest"  # You can specify a specific Flutter version if needed

    - name: Get Flutter packages
      run: flutter pub get

    - name: Build Windows app
      run: flutter build windows --release  # Builds the release version of the Windows app

    - name: Zip build artifacts
      run: |
        mkdir -p build/artifacts
        zip -r build/artifacts/windows-app.zip build/windows/runner/Release/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-app
        path: build/artifacts/windows-app.zip

#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}

